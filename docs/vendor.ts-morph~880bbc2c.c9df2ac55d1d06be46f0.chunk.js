(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{Boo3:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const a=t("ejOz"),i=t("1hU1");e.TypeGuards=class{constructor(){}static hasExpression(n){return null!=n.getExpression&&null!=n.getExpression()}static hasName(n){return null!=n.getName&&"string"==typeof n.getName()}static hasBody(n){return null!=n.getBody&&null!=n.getBody()}static isNode(n){return null!=n&&null!=n.compilerNode}static isCommentNode(n){const e=n.getKind();return e===i.SyntaxKind.SingleLineCommentTrivia||e===i.SyntaxKind.MultiLineCommentTrivia}static isCommentStatement(n){return n.compilerNode._commentKind===a.CommentNodeKind.Statement}static isCommentClassElement(n){return n.compilerNode._commentKind===a.CommentNodeKind.ClassElement}static isCommentTypeElement(n){return n.compilerNode._commentKind===a.CommentNodeKind.TypeElement}static isCommentObjectLiteralElement(n){return n.compilerNode._commentKind===a.CommentNodeKind.ObjectLiteralElement}static isCommentEnumMember(n){return n.compilerNode._commentKind==a.CommentNodeKind.EnumMember}static isAbstractableNode(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.ClassExpression:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.SetAccessor:return!0;default:return!1}}static isAmbientableNode(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.EnumDeclaration:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.VariableStatement:case i.SyntaxKind.TypeAliasDeclaration:return!0;default:return!1}}static isAnyKeyword(n){return n.getKind()===i.SyntaxKind.AnyKeyword}static isArgumentedNode(n){switch(n.getKind()){case i.SyntaxKind.CallExpression:case i.SyntaxKind.NewExpression:return!0;default:return!1}}static isArrayBindingPattern(n){return n.getKind()===i.SyntaxKind.ArrayBindingPattern}static isArrayLiteralExpression(n){return n.getKind()===i.SyntaxKind.ArrayLiteralExpression}static isArrayTypeNode(n){return n.getKind()===i.SyntaxKind.ArrayType}static isArrowFunction(n){return n.getKind()===i.SyntaxKind.ArrowFunction}static isAsExpression(n){return n.getKind()===i.SyntaxKind.AsExpression}static isAsyncableNode(n){switch(n.getKind()){case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.ArrowFunction:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.FunctionExpression:return!0;default:return!1}}static isAwaitExpression(n){return n.getKind()===i.SyntaxKind.AwaitExpression}static isAwaitableNode(n){return n.getKind()===i.SyntaxKind.ForOfStatement}static isBinaryExpression(n){return n.getKind()===i.SyntaxKind.BinaryExpression}static isBindingElement(n){return n.getKind()===i.SyntaxKind.BindingElement}static isBindingNamedNode(n){switch(n.getKind()){case i.SyntaxKind.BindingElement:case i.SyntaxKind.Parameter:case i.SyntaxKind.VariableDeclaration:return!0;default:return!1}}static isBlock(n){return n.getKind()===i.SyntaxKind.Block}static isBodiedNode(n){switch(n.getKind()){case i.SyntaxKind.ArrowFunction:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.ModuleDeclaration:return!0;default:return!1}}static isBodyableNode(n){switch(n.getKind()){case i.SyntaxKind.Constructor:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.FunctionDeclaration:return!0;default:return!1}}static isBooleanKeyword(n){return n.getKind()===i.SyntaxKind.BooleanKeyword}static isBooleanLiteral(n){switch(n.getKind()){case i.SyntaxKind.FalseKeyword:case i.SyntaxKind.TrueKeyword:return!0;default:return!1}}static isBreakStatement(n){return n.getKind()===i.SyntaxKind.BreakStatement}static isCallExpression(n){return n.getKind()===i.SyntaxKind.CallExpression}static isCallSignatureDeclaration(n){return n.getKind()===i.SyntaxKind.CallSignature}static isCaseBlock(n){return n.getKind()===i.SyntaxKind.CaseBlock}static isCaseClause(n){return n.getKind()===i.SyntaxKind.CaseClause}static isCatchClause(n){return n.getKind()===i.SyntaxKind.CatchClause}static isChildOrderableNode(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.Constructor:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.EnumDeclaration:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.CallSignature:case i.SyntaxKind.ConstructSignature:case i.SyntaxKind.IndexSignature:case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.MethodSignature:case i.SyntaxKind.PropertySignature:case i.SyntaxKind.ExportAssignment:case i.SyntaxKind.ExportDeclaration:case i.SyntaxKind.ImportDeclaration:case i.SyntaxKind.ImportEqualsDeclaration:case i.SyntaxKind.ModuleBlock:case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.Block:case i.SyntaxKind.BreakStatement:case i.SyntaxKind.ContinueStatement:case i.SyntaxKind.DebuggerStatement:case i.SyntaxKind.DoStatement:case i.SyntaxKind.EmptyStatement:case i.SyntaxKind.ExpressionStatement:case i.SyntaxKind.ForInStatement:case i.SyntaxKind.ForOfStatement:case i.SyntaxKind.ForStatement:case i.SyntaxKind.IfStatement:case i.SyntaxKind.LabeledStatement:case i.SyntaxKind.NotEmittedStatement:case i.SyntaxKind.ReturnStatement:case i.SyntaxKind.SwitchStatement:case i.SyntaxKind.ThrowStatement:case i.SyntaxKind.TryStatement:case i.SyntaxKind.VariableStatement:case i.SyntaxKind.WhileStatement:case i.SyntaxKind.WithStatement:case i.SyntaxKind.TypeAliasDeclaration:return!0;default:return!1}}static isClassDeclaration(n){return n.getKind()===i.SyntaxKind.ClassDeclaration}static isClassExpression(n){return n.getKind()===i.SyntaxKind.ClassExpression}static isClassLikeDeclarationBase(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.ClassExpression:return!0;default:return!1}}static isCommaListExpression(n){return n.getKind()===i.SyntaxKind.CommaListExpression}static isComputedPropertyName(n){return n.getKind()===i.SyntaxKind.ComputedPropertyName}static isConditionalExpression(n){return n.getKind()===i.SyntaxKind.ConditionalExpression}static isConditionalTypeNode(n){return n.getKind()===i.SyntaxKind.ConditionalType}static isConstructSignatureDeclaration(n){return n.getKind()===i.SyntaxKind.ConstructSignature}static isConstructorDeclaration(n){return n.getKind()===i.SyntaxKind.Constructor}static isConstructorTypeNode(n){return n.getKind()===i.SyntaxKind.ConstructorType}static isContinueStatement(n){return n.getKind()===i.SyntaxKind.ContinueStatement}static isDebuggerStatement(n){return n.getKind()===i.SyntaxKind.DebuggerStatement}static isDecoratableNode(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.ClassExpression:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.Parameter:return!0;default:return!1}}static isDecorator(n){return n.getKind()===i.SyntaxKind.Decorator}static isDefaultClause(n){return n.getKind()===i.SyntaxKind.DefaultClause}static isDeleteExpression(n){return n.getKind()===i.SyntaxKind.DeleteExpression}static isDoStatement(n){return n.getKind()===i.SyntaxKind.DoStatement}static isElementAccessExpression(n){return n.getKind()===i.SyntaxKind.ElementAccessExpression}static isEmptyStatement(n){return n.getKind()===i.SyntaxKind.EmptyStatement}static isEnumDeclaration(n){return n.getKind()===i.SyntaxKind.EnumDeclaration}static isEnumMember(n){return n.getKind()===i.SyntaxKind.EnumMember}static isExclamationTokenableNode(n){switch(n.getKind()){case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.VariableDeclaration:return!0;default:return!1}}static isExportAssignment(n){return n.getKind()===i.SyntaxKind.ExportAssignment}static isExportDeclaration(n){return n.getKind()===i.SyntaxKind.ExportDeclaration}static isExportGetableNode(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.EnumDeclaration:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.VariableStatement:case i.SyntaxKind.TypeAliasDeclaration:case i.SyntaxKind.VariableDeclaration:return!0;default:return!1}}static isExportSpecifier(n){return n.getKind()===i.SyntaxKind.ExportSpecifier}static isExportableNode(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.EnumDeclaration:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.VariableStatement:case i.SyntaxKind.TypeAliasDeclaration:return!0;default:return!1}}static isExpression(n){switch(n.getKind()){case i.SyntaxKind.AnyKeyword:case i.SyntaxKind.BooleanKeyword:case i.SyntaxKind.NeverKeyword:case i.SyntaxKind.NumberKeyword:case i.SyntaxKind.ObjectKeyword:case i.SyntaxKind.StringKeyword:case i.SyntaxKind.SymbolKeyword:case i.SyntaxKind.UndefinedKeyword:case i.SyntaxKind.ClassExpression:case i.SyntaxKind.Identifier:case i.SyntaxKind.AsExpression:case i.SyntaxKind.AwaitExpression:case i.SyntaxKind.BinaryExpression:case i.SyntaxKind.CallExpression:case i.SyntaxKind.CommaListExpression:case i.SyntaxKind.ConditionalExpression:case i.SyntaxKind.DeleteExpression:case i.SyntaxKind.ElementAccessExpression:case i.SyntaxKind.ImportKeyword:case i.SyntaxKind.MetaProperty:case i.SyntaxKind.NewExpression:case i.SyntaxKind.NonNullExpression:case i.SyntaxKind.OmittedExpression:case i.SyntaxKind.ParenthesizedExpression:case i.SyntaxKind.PartiallyEmittedExpression:case i.SyntaxKind.PostfixUnaryExpression:case i.SyntaxKind.PrefixUnaryExpression:case i.SyntaxKind.PropertyAccessExpression:case i.SyntaxKind.SpreadElement:case i.SyntaxKind.SuperKeyword:case i.SyntaxKind.ThisKeyword:case i.SyntaxKind.TypeAssertionExpression:case i.SyntaxKind.TypeOfExpression:case i.SyntaxKind.VoidExpression:case i.SyntaxKind.YieldExpression:case i.SyntaxKind.ArrowFunction:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.JsxClosingFragment:case i.SyntaxKind.JsxElement:case i.SyntaxKind.JsxExpression:case i.SyntaxKind.JsxFragment:case i.SyntaxKind.JsxOpeningElement:case i.SyntaxKind.JsxOpeningFragment:case i.SyntaxKind.JsxSelfClosingElement:case i.SyntaxKind.FalseKeyword:case i.SyntaxKind.TrueKeyword:case i.SyntaxKind.NullKeyword:case i.SyntaxKind.NumericLiteral:case i.SyntaxKind.RegularExpressionLiteral:case i.SyntaxKind.StringLiteral:case i.SyntaxKind.ArrayLiteralExpression:case i.SyntaxKind.ObjectLiteralExpression:case i.SyntaxKind.NoSubstitutionTemplateLiteral:case i.SyntaxKind.TaggedTemplateExpression:case i.SyntaxKind.TemplateExpression:return!0;default:return!1}}static isExpressionStatement(n){return n.getKind()===i.SyntaxKind.ExpressionStatement}static isExpressionWithTypeArguments(n){return n.getKind()===i.SyntaxKind.ExpressionWithTypeArguments}static isExpressionedNode(n){switch(n.getKind()){case i.SyntaxKind.AsExpression:case i.SyntaxKind.NonNullExpression:case i.SyntaxKind.ParenthesizedExpression:case i.SyntaxKind.PartiallyEmittedExpression:case i.SyntaxKind.SpreadElement:case i.SyntaxKind.SpreadAssignment:case i.SyntaxKind.TemplateSpan:return!0;default:return!1}}static isExtendsClauseableNode(n){return n.getKind()===i.SyntaxKind.InterfaceDeclaration}static isExternalModuleReference(n){return n.getKind()===i.SyntaxKind.ExternalModuleReference}static isFalseKeyword(n){return n.getKind()===i.SyntaxKind.FalseKeyword}static isForInStatement(n){return n.getKind()===i.SyntaxKind.ForInStatement}static isForOfStatement(n){return n.getKind()===i.SyntaxKind.ForOfStatement}static isForStatement(n){return n.getKind()===i.SyntaxKind.ForStatement}static isFunctionDeclaration(n){return n.getKind()===i.SyntaxKind.FunctionDeclaration}static isFunctionExpression(n){return n.getKind()===i.SyntaxKind.FunctionExpression}static isFunctionLikeDeclaration(n){switch(n.getKind()){case i.SyntaxKind.Constructor:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.ArrowFunction:case i.SyntaxKind.FunctionDeclaration:return!0;default:return!1}}static isFunctionTypeNode(n){return n.getKind()===i.SyntaxKind.FunctionType}static isGeneratorableNode(n){switch(n.getKind()){case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.YieldExpression:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.FunctionExpression:return!0;default:return!1}}static isGetAccessorDeclaration(n){return n.getKind()===i.SyntaxKind.GetAccessor}static isHeritageClause(n){return n.getKind()===i.SyntaxKind.HeritageClause}static isHeritageClauseableNode(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.ClassExpression:case i.SyntaxKind.InterfaceDeclaration:return!0;default:return!1}}static isIdentifier(n){return n.getKind()===i.SyntaxKind.Identifier}static isIfStatement(n){return n.getKind()===i.SyntaxKind.IfStatement}static isImplementsClauseableNode(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.ClassExpression:return!0;default:return!1}}static isImportClause(n){return n.getKind()===i.SyntaxKind.ImportClause}static isImportDeclaration(n){return n.getKind()===i.SyntaxKind.ImportDeclaration}static isImportEqualsDeclaration(n){return n.getKind()===i.SyntaxKind.ImportEqualsDeclaration}static isImportExpression(n){return n.getKind()===i.SyntaxKind.ImportKeyword}static isImportSpecifier(n){return n.getKind()===i.SyntaxKind.ImportSpecifier}static isImportTypeNode(n){return n.getKind()===i.SyntaxKind.ImportType}static isIndexSignatureDeclaration(n){return n.getKind()===i.SyntaxKind.IndexSignature}static isIndexedAccessTypeNode(n){return n.getKind()===i.SyntaxKind.IndexedAccessType}static isInferKeyword(n){return n.getKind()===i.SyntaxKind.InferKeyword}static isInferTypeNode(n){return n.getKind()===i.SyntaxKind.InferType}static isInitializerExpressionGetableNode(n){switch(n.getKind()){case i.SyntaxKind.BindingElement:case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.EnumMember:case i.SyntaxKind.Parameter:case i.SyntaxKind.PropertySignature:case i.SyntaxKind.VariableDeclaration:case i.SyntaxKind.PropertyAssignment:case i.SyntaxKind.ShorthandPropertyAssignment:return!0;default:return!1}}static isInitializerExpressionableNode(n){switch(n.getKind()){case i.SyntaxKind.BindingElement:case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.EnumMember:case i.SyntaxKind.Parameter:case i.SyntaxKind.PropertySignature:case i.SyntaxKind.VariableDeclaration:return!0;default:return!1}}static isInterfaceDeclaration(n){return n.getKind()===i.SyntaxKind.InterfaceDeclaration}static isIntersectionTypeNode(n){return n.getKind()===i.SyntaxKind.IntersectionType}static isIterationStatement(n){switch(n.getKind()){case i.SyntaxKind.DoStatement:case i.SyntaxKind.ForInStatement:case i.SyntaxKind.ForOfStatement:case i.SyntaxKind.ForStatement:case i.SyntaxKind.WhileStatement:return!0;default:return!1}}static isJSDoc(n){return n.getKind()===i.SyntaxKind.JSDocComment}static isJSDocAugmentsTag(n){return n.getKind()===i.SyntaxKind.JSDocAugmentsTag}static isJSDocClassTag(n){return n.getKind()===i.SyntaxKind.JSDocClassTag}static isJSDocFunctionType(n){return n.getKind()===i.SyntaxKind.JSDocFunctionType}static isJSDocParameterTag(n){return n.getKind()===i.SyntaxKind.JSDocParameterTag}static isJSDocPropertyLikeTag(n){switch(n.getKind()){case i.SyntaxKind.JSDocParameterTag:case i.SyntaxKind.JSDocPropertyTag:return!0;default:return!1}}static isJSDocPropertyTag(n){return n.getKind()===i.SyntaxKind.JSDocPropertyTag}static isJSDocReturnTag(n){return n.getKind()===i.SyntaxKind.JSDocReturnTag}static isJSDocSignature(n){return n.getKind()===i.SyntaxKind.JSDocSignature}static isJSDocTag(n){switch(n.getKind()){case i.SyntaxKind.JSDocAugmentsTag:case i.SyntaxKind.JSDocClassTag:case i.SyntaxKind.JSDocParameterTag:case i.SyntaxKind.JSDocPropertyTag:case i.SyntaxKind.JSDocReturnTag:case i.SyntaxKind.JSDocTypedefTag:case i.SyntaxKind.JSDocTypeTag:case i.SyntaxKind.JSDocTag:return!0;default:return!1}}static isJSDocType(n){switch(n.getKind()){case i.SyntaxKind.JSDocFunctionType:case i.SyntaxKind.JSDocSignature:return!0;default:return!1}}static isJSDocTypeExpression(n){return n.getKind()===i.SyntaxKind.JSDocTypeExpression}static isJSDocTypeTag(n){return n.getKind()===i.SyntaxKind.JSDocTypeTag}static isJSDocTypedefTag(n){return n.getKind()===i.SyntaxKind.JSDocTypedefTag}static isJSDocUnknownTag(n){return n.getKind()===i.SyntaxKind.JSDocTag}static isJSDocableNode(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.ClassExpression:case i.SyntaxKind.Constructor:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.EnumDeclaration:case i.SyntaxKind.EnumMember:case i.SyntaxKind.ArrowFunction:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.CallSignature:case i.SyntaxKind.ConstructSignature:case i.SyntaxKind.IndexSignature:case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.MethodSignature:case i.SyntaxKind.PropertySignature:case i.SyntaxKind.ImportEqualsDeclaration:case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.ExpressionStatement:case i.SyntaxKind.LabeledStatement:case i.SyntaxKind.VariableStatement:case i.SyntaxKind.TypeAliasDeclaration:return!0;default:return!1}}static isJsxAttribute(n){return n.getKind()===i.SyntaxKind.JsxAttribute}static isJsxAttributedNode(n){switch(n.getKind()){case i.SyntaxKind.JsxOpeningElement:case i.SyntaxKind.JsxSelfClosingElement:return!0;default:return!1}}static isJsxClosingElement(n){return n.getKind()===i.SyntaxKind.JsxClosingElement}static isJsxClosingFragment(n){return n.getKind()===i.SyntaxKind.JsxClosingFragment}static isJsxElement(n){return n.getKind()===i.SyntaxKind.JsxElement}static isJsxExpression(n){return n.getKind()===i.SyntaxKind.JsxExpression}static isJsxFragment(n){return n.getKind()===i.SyntaxKind.JsxFragment}static isJsxOpeningElement(n){return n.getKind()===i.SyntaxKind.JsxOpeningElement}static isJsxOpeningFragment(n){return n.getKind()===i.SyntaxKind.JsxOpeningFragment}static isJsxSelfClosingElement(n){return n.getKind()===i.SyntaxKind.JsxSelfClosingElement}static isJsxSpreadAttribute(n){return n.getKind()===i.SyntaxKind.JsxSpreadAttribute}static isJsxTagNamedNode(n){switch(n.getKind()){case i.SyntaxKind.JsxClosingElement:case i.SyntaxKind.JsxOpeningElement:case i.SyntaxKind.JsxSelfClosingElement:return!0;default:return!1}}static isJsxText(n){return n.getKind()===i.SyntaxKind.JsxText}static isLabeledStatement(n){return n.getKind()===i.SyntaxKind.LabeledStatement}static isLeftHandSideExpression(n){switch(n.getKind()){case i.SyntaxKind.ClassExpression:case i.SyntaxKind.Identifier:case i.SyntaxKind.CallExpression:case i.SyntaxKind.ElementAccessExpression:case i.SyntaxKind.ImportKeyword:case i.SyntaxKind.MetaProperty:case i.SyntaxKind.NewExpression:case i.SyntaxKind.NonNullExpression:case i.SyntaxKind.PropertyAccessExpression:case i.SyntaxKind.SuperKeyword:case i.SyntaxKind.ThisKeyword:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.JsxElement:case i.SyntaxKind.JsxFragment:case i.SyntaxKind.JsxSelfClosingElement:case i.SyntaxKind.FalseKeyword:case i.SyntaxKind.TrueKeyword:case i.SyntaxKind.NullKeyword:case i.SyntaxKind.NumericLiteral:case i.SyntaxKind.RegularExpressionLiteral:case i.SyntaxKind.StringLiteral:case i.SyntaxKind.ArrayLiteralExpression:case i.SyntaxKind.ObjectLiteralExpression:case i.SyntaxKind.NoSubstitutionTemplateLiteral:case i.SyntaxKind.TaggedTemplateExpression:case i.SyntaxKind.TemplateExpression:return!0;default:return!1}}static isLeftHandSideExpressionedNode(n){switch(n.getKind()){case i.SyntaxKind.CallExpression:case i.SyntaxKind.ElementAccessExpression:case i.SyntaxKind.NewExpression:case i.SyntaxKind.PropertyAccessExpression:case i.SyntaxKind.ExpressionWithTypeArguments:return!0;default:return!1}}static isLiteralExpression(n){switch(n.getKind()){case i.SyntaxKind.NumericLiteral:case i.SyntaxKind.RegularExpressionLiteral:case i.SyntaxKind.StringLiteral:case i.SyntaxKind.NoSubstitutionTemplateLiteral:return!0;default:return!1}}static isLiteralLikeNode(n){switch(n.getKind()){case i.SyntaxKind.JsxText:case i.SyntaxKind.NumericLiteral:case i.SyntaxKind.RegularExpressionLiteral:case i.SyntaxKind.StringLiteral:case i.SyntaxKind.NoSubstitutionTemplateLiteral:case i.SyntaxKind.TemplateHead:case i.SyntaxKind.TemplateMiddle:case i.SyntaxKind.TemplateTail:return!0;default:return!1}}static isLiteralTypeNode(n){return n.getKind()===i.SyntaxKind.LiteralType}static isMemberExpression(n){switch(n.getKind()){case i.SyntaxKind.ClassExpression:case i.SyntaxKind.Identifier:case i.SyntaxKind.ElementAccessExpression:case i.SyntaxKind.ImportKeyword:case i.SyntaxKind.MetaProperty:case i.SyntaxKind.NewExpression:case i.SyntaxKind.PropertyAccessExpression:case i.SyntaxKind.SuperKeyword:case i.SyntaxKind.ThisKeyword:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.JsxElement:case i.SyntaxKind.JsxFragment:case i.SyntaxKind.JsxSelfClosingElement:case i.SyntaxKind.FalseKeyword:case i.SyntaxKind.TrueKeyword:case i.SyntaxKind.NullKeyword:case i.SyntaxKind.NumericLiteral:case i.SyntaxKind.RegularExpressionLiteral:case i.SyntaxKind.StringLiteral:case i.SyntaxKind.ArrayLiteralExpression:case i.SyntaxKind.ObjectLiteralExpression:case i.SyntaxKind.NoSubstitutionTemplateLiteral:case i.SyntaxKind.TaggedTemplateExpression:case i.SyntaxKind.TemplateExpression:return!0;default:return!1}}static isMetaProperty(n){return n.getKind()===i.SyntaxKind.MetaProperty}static isMethodDeclaration(n){return n.getKind()===i.SyntaxKind.MethodDeclaration}static isMethodSignature(n){return n.getKind()===i.SyntaxKind.MethodSignature}static isModifierableNode(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.ClassExpression:case i.SyntaxKind.Constructor:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.EnumDeclaration:case i.SyntaxKind.ArrowFunction:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.Parameter:case i.SyntaxKind.IndexSignature:case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.PropertySignature:case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.VariableStatement:case i.SyntaxKind.TypeAliasDeclaration:case i.SyntaxKind.VariableDeclarationList:return!0;default:return!1}}static isModuleBlock(n){return n.getKind()===i.SyntaxKind.ModuleBlock}static isModuledNode(n){switch(n.getKind()){case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.SourceFile:return!0;default:return!1}}static isNameableNode(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.ClassExpression:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.FunctionExpression:return!0;default:return!1}}static isNamedExports(n){return n.getKind()===i.SyntaxKind.NamedExports}static isNamedImports(n){return n.getKind()===i.SyntaxKind.NamedImports}static isNamedNode(n){switch(n.getKind()){case i.SyntaxKind.EnumDeclaration:case i.SyntaxKind.MetaProperty:case i.SyntaxKind.PropertyAccessExpression:case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.JsxAttribute:case i.SyntaxKind.ImportEqualsDeclaration:case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.TypeAliasDeclaration:case i.SyntaxKind.TypeParameter:case i.SyntaxKind.ShorthandPropertyAssignment:return!0;default:return!1}}static isNamespaceChildableNode(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.EnumDeclaration:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.VariableStatement:return!0;default:return!1}}static isNamespaceDeclaration(n){return n.getKind()===i.SyntaxKind.ModuleDeclaration}static isNamespaceImport(n){return n.getKind()===i.SyntaxKind.NamespaceImport}static isNeverKeyword(n){return n.getKind()===i.SyntaxKind.NeverKeyword}static isNewExpression(n){return n.getKind()===i.SyntaxKind.NewExpression}static isNoSubstitutionTemplateLiteral(n){return n.getKind()===i.SyntaxKind.NoSubstitutionTemplateLiteral}static isNonNullExpression(n){return n.getKind()===i.SyntaxKind.NonNullExpression}static isNotEmittedStatement(n){return n.getKind()===i.SyntaxKind.NotEmittedStatement}static isNullLiteral(n){return n.getKind()===i.SyntaxKind.NullKeyword}static isNumberKeyword(n){return n.getKind()===i.SyntaxKind.NumberKeyword}static isNumericLiteral(n){return n.getKind()===i.SyntaxKind.NumericLiteral}static isObjectBindingPattern(n){return n.getKind()===i.SyntaxKind.ObjectBindingPattern}static isObjectKeyword(n){return n.getKind()===i.SyntaxKind.ObjectKeyword}static isObjectLiteralExpression(n){return n.getKind()===i.SyntaxKind.ObjectLiteralExpression}static isOmittedExpression(n){return n.getKind()===i.SyntaxKind.OmittedExpression}static isOverloadableNode(n){switch(n.getKind()){case i.SyntaxKind.Constructor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.FunctionDeclaration:return!0;default:return!1}}static isParameterDeclaration(n){return n.getKind()===i.SyntaxKind.Parameter}static isParameteredNode(n){switch(n.getKind()){case i.SyntaxKind.Constructor:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.JSDocFunctionType:case i.SyntaxKind.ArrowFunction:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.CallSignature:case i.SyntaxKind.ConstructSignature:case i.SyntaxKind.MethodSignature:case i.SyntaxKind.ConstructorType:case i.SyntaxKind.FunctionType:return!0;default:return!1}}static isParenthesizedExpression(n){return n.getKind()===i.SyntaxKind.ParenthesizedExpression}static isParenthesizedTypeNode(n){return n.getKind()===i.SyntaxKind.ParenthesizedType}static isPartiallyEmittedExpression(n){return n.getKind()===i.SyntaxKind.PartiallyEmittedExpression}static isPostfixUnaryExpression(n){return n.getKind()===i.SyntaxKind.PostfixUnaryExpression}static isPrefixUnaryExpression(n){return n.getKind()===i.SyntaxKind.PrefixUnaryExpression}static isPrimaryExpression(n){switch(n.getKind()){case i.SyntaxKind.ClassExpression:case i.SyntaxKind.Identifier:case i.SyntaxKind.ImportKeyword:case i.SyntaxKind.MetaProperty:case i.SyntaxKind.NewExpression:case i.SyntaxKind.SuperKeyword:case i.SyntaxKind.ThisKeyword:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.JsxElement:case i.SyntaxKind.JsxFragment:case i.SyntaxKind.JsxSelfClosingElement:case i.SyntaxKind.FalseKeyword:case i.SyntaxKind.TrueKeyword:case i.SyntaxKind.NullKeyword:case i.SyntaxKind.NumericLiteral:case i.SyntaxKind.RegularExpressionLiteral:case i.SyntaxKind.StringLiteral:case i.SyntaxKind.ArrayLiteralExpression:case i.SyntaxKind.ObjectLiteralExpression:case i.SyntaxKind.NoSubstitutionTemplateLiteral:case i.SyntaxKind.TemplateExpression:return!0;default:return!1}}static isPropertyAccessExpression(n){return n.getKind()===i.SyntaxKind.PropertyAccessExpression}static isPropertyAssignment(n){return n.getKind()===i.SyntaxKind.PropertyAssignment}static isPropertyDeclaration(n){return n.getKind()===i.SyntaxKind.PropertyDeclaration}static isPropertyNamedNode(n){switch(n.getKind()){case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.EnumMember:case i.SyntaxKind.MethodSignature:case i.SyntaxKind.PropertySignature:case i.SyntaxKind.PropertyAssignment:return!0;default:return!1}}static isPropertySignature(n){return n.getKind()===i.SyntaxKind.PropertySignature}static isQualifiedName(n){return n.getKind()===i.SyntaxKind.QualifiedName}static isQuestionTokenableNode(n){switch(n.getKind()){case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.Parameter:case i.SyntaxKind.MethodSignature:case i.SyntaxKind.PropertySignature:case i.SyntaxKind.PropertyAssignment:case i.SyntaxKind.ShorthandPropertyAssignment:return!0;default:return!1}}static isReadonlyableNode(n){switch(n.getKind()){case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.Parameter:case i.SyntaxKind.IndexSignature:case i.SyntaxKind.PropertySignature:return!0;default:return!1}}static isReferenceFindableNode(n){switch(n.getKind()){case i.SyntaxKind.BindingElement:case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.ClassExpression:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.Identifier:case i.SyntaxKind.EnumDeclaration:case i.SyntaxKind.EnumMember:case i.SyntaxKind.MetaProperty:case i.SyntaxKind.PropertyAccessExpression:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.Parameter:case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.MethodSignature:case i.SyntaxKind.PropertySignature:case i.SyntaxKind.JsxAttribute:case i.SyntaxKind.ImportEqualsDeclaration:case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.TypeAliasDeclaration:case i.SyntaxKind.TypeParameter:case i.SyntaxKind.VariableDeclaration:case i.SyntaxKind.PropertyAssignment:case i.SyntaxKind.ShorthandPropertyAssignment:return!0;default:return!1}}static isRegularExpressionLiteral(n){return n.getKind()===i.SyntaxKind.RegularExpressionLiteral}static isRenameableNode(n){switch(n.getKind()){case i.SyntaxKind.BindingElement:case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.ClassExpression:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.Identifier:case i.SyntaxKind.EnumDeclaration:case i.SyntaxKind.EnumMember:case i.SyntaxKind.MetaProperty:case i.SyntaxKind.PropertyAccessExpression:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.Parameter:case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.MethodSignature:case i.SyntaxKind.PropertySignature:case i.SyntaxKind.JsxAttribute:case i.SyntaxKind.ImportEqualsDeclaration:case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.NamespaceImport:case i.SyntaxKind.TypeAliasDeclaration:case i.SyntaxKind.TypeParameter:case i.SyntaxKind.VariableDeclaration:case i.SyntaxKind.PropertyAssignment:case i.SyntaxKind.ShorthandPropertyAssignment:return!0;default:return!1}}static isReturnStatement(n){return n.getKind()===i.SyntaxKind.ReturnStatement}static isReturnTypedNode(n){switch(n.getKind()){case i.SyntaxKind.Constructor:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.JSDocFunctionType:case i.SyntaxKind.ArrowFunction:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.CallSignature:case i.SyntaxKind.ConstructSignature:case i.SyntaxKind.IndexSignature:case i.SyntaxKind.MethodSignature:case i.SyntaxKind.ConstructorType:case i.SyntaxKind.FunctionType:return!0;default:return!1}}static isScopeableNode(n){return n.getKind()===i.SyntaxKind.Parameter}static isScopedNode(n){switch(n.getKind()){case i.SyntaxKind.Constructor:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.SetAccessor:return!0;default:return!1}}static isSemicolonToken(n){return n.getKind()===i.SyntaxKind.SemicolonToken}static isSetAccessorDeclaration(n){return n.getKind()===i.SyntaxKind.SetAccessor}static isShorthandPropertyAssignment(n){return n.getKind()===i.SyntaxKind.ShorthandPropertyAssignment}static isSignaturedDeclaration(n){switch(n.getKind()){case i.SyntaxKind.Constructor:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.JSDocFunctionType:case i.SyntaxKind.ArrowFunction:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.CallSignature:case i.SyntaxKind.ConstructSignature:case i.SyntaxKind.MethodSignature:case i.SyntaxKind.ConstructorType:case i.SyntaxKind.FunctionType:return!0;default:return!1}}static isSourceFile(n){return n.getKind()===i.SyntaxKind.SourceFile}static isSpreadAssignment(n){return n.getKind()===i.SyntaxKind.SpreadAssignment}static isSpreadElement(n){return n.getKind()===i.SyntaxKind.SpreadElement}static isStatement(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.EnumDeclaration:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.ExportAssignment:case i.SyntaxKind.ExportDeclaration:case i.SyntaxKind.ImportDeclaration:case i.SyntaxKind.ImportEqualsDeclaration:case i.SyntaxKind.ModuleBlock:case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.Block:case i.SyntaxKind.BreakStatement:case i.SyntaxKind.ContinueStatement:case i.SyntaxKind.DebuggerStatement:case i.SyntaxKind.DoStatement:case i.SyntaxKind.EmptyStatement:case i.SyntaxKind.ExpressionStatement:case i.SyntaxKind.ForInStatement:case i.SyntaxKind.ForOfStatement:case i.SyntaxKind.ForStatement:case i.SyntaxKind.IfStatement:case i.SyntaxKind.LabeledStatement:case i.SyntaxKind.NotEmittedStatement:case i.SyntaxKind.ReturnStatement:case i.SyntaxKind.SwitchStatement:case i.SyntaxKind.ThrowStatement:case i.SyntaxKind.TryStatement:case i.SyntaxKind.VariableStatement:case i.SyntaxKind.WhileStatement:case i.SyntaxKind.WithStatement:case i.SyntaxKind.TypeAliasDeclaration:return!0;default:return!1}}static isStatementedNode(n){switch(n.getKind()){case i.SyntaxKind.Constructor:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.ArrowFunction:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.ModuleBlock:case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.SourceFile:case i.SyntaxKind.Block:case i.SyntaxKind.CaseClause:case i.SyntaxKind.DefaultClause:return!0;default:return!1}}static isStaticableNode(n){switch(n.getKind()){case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.SetAccessor:return!0;default:return!1}}static isStringKeyword(n){return n.getKind()===i.SyntaxKind.StringKeyword}static isStringLiteral(n){return n.getKind()===i.SyntaxKind.StringLiteral}static isSuperExpression(n){return n.getKind()===i.SyntaxKind.SuperKeyword}static isSwitchStatement(n){return n.getKind()===i.SyntaxKind.SwitchStatement}static isSymbolKeyword(n){return n.getKind()===i.SyntaxKind.SymbolKeyword}static isSyntaxList(n){return n.getKind()===i.SyntaxKind.SyntaxList}static isTaggedTemplateExpression(n){return n.getKind()===i.SyntaxKind.TaggedTemplateExpression}static isTemplateExpression(n){return n.getKind()===i.SyntaxKind.TemplateExpression}static isTemplateHead(n){return n.getKind()===i.SyntaxKind.TemplateHead}static isTemplateMiddle(n){return n.getKind()===i.SyntaxKind.TemplateMiddle}static isTemplateSpan(n){return n.getKind()===i.SyntaxKind.TemplateSpan}static isTemplateTail(n){return n.getKind()===i.SyntaxKind.TemplateTail}static isTextInsertableNode(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.ClassExpression:case i.SyntaxKind.Constructor:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.EnumDeclaration:case i.SyntaxKind.ArrowFunction:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.SourceFile:case i.SyntaxKind.Block:case i.SyntaxKind.CaseBlock:case i.SyntaxKind.CaseClause:case i.SyntaxKind.DefaultClause:return!0;default:return!1}}static isThisExpression(n){return n.getKind()===i.SyntaxKind.ThisKeyword}static isThisTypeNode(n){return n.getKind()===i.SyntaxKind.ThisType}static isThrowStatement(n){return n.getKind()===i.SyntaxKind.ThrowStatement}static isTrueKeyword(n){return n.getKind()===i.SyntaxKind.TrueKeyword}static isTryStatement(n){return n.getKind()===i.SyntaxKind.TryStatement}static isTupleTypeNode(n){return n.getKind()===i.SyntaxKind.TupleType}static isTypeAliasDeclaration(n){return n.getKind()===i.SyntaxKind.TypeAliasDeclaration}static isTypeArgumentedNode(n){switch(n.getKind()){case i.SyntaxKind.CallExpression:case i.SyntaxKind.NewExpression:case i.SyntaxKind.ImportType:return!0;default:return!1}}static isTypeAssertion(n){return n.getKind()===i.SyntaxKind.TypeAssertionExpression}static isTypeElement(n){switch(n.getKind()){case i.SyntaxKind.CallSignature:case i.SyntaxKind.ConstructSignature:case i.SyntaxKind.IndexSignature:case i.SyntaxKind.MethodSignature:case i.SyntaxKind.PropertySignature:return!0;default:return!1}}static isTypeElementMemberedNode(n){switch(n.getKind()){case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.TypeLiteral:return!0;default:return!1}}static isTypeLiteralNode(n){return n.getKind()===i.SyntaxKind.TypeLiteral}static isTypeNode(n){switch(n.getKind()){case i.SyntaxKind.TypePredicate:case i.SyntaxKind.JSDocFunctionType:case i.SyntaxKind.JSDocSignature:case i.SyntaxKind.JSDocTypeExpression:case i.SyntaxKind.ArrayType:case i.SyntaxKind.ConditionalType:case i.SyntaxKind.ConstructorType:case i.SyntaxKind.ExpressionWithTypeArguments:case i.SyntaxKind.FunctionType:case i.SyntaxKind.ImportType:case i.SyntaxKind.IndexedAccessType:case i.SyntaxKind.InferType:case i.SyntaxKind.IntersectionType:case i.SyntaxKind.LiteralType:case i.SyntaxKind.ParenthesizedType:case i.SyntaxKind.ThisType:case i.SyntaxKind.TupleType:case i.SyntaxKind.TypeLiteral:case i.SyntaxKind.TypeReference:case i.SyntaxKind.UnionType:return!0;default:return!1}}static isTypeOfExpression(n){return n.getKind()===i.SyntaxKind.TypeOfExpression}static isTypeParameterDeclaration(n){return n.getKind()===i.SyntaxKind.TypeParameter}static isTypeParameteredNode(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.ClassExpression:case i.SyntaxKind.Constructor:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.ArrowFunction:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.CallSignature:case i.SyntaxKind.ConstructSignature:case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.MethodSignature:case i.SyntaxKind.FunctionType:case i.SyntaxKind.TypeAliasDeclaration:return!0;default:return!1}}static isTypeReferenceNode(n){return n.getKind()===i.SyntaxKind.TypeReference}static isTypedNode(n){switch(n.getKind()){case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.AsExpression:case i.SyntaxKind.TypeAssertionExpression:case i.SyntaxKind.Parameter:case i.SyntaxKind.PropertySignature:case i.SyntaxKind.TypeAliasDeclaration:case i.SyntaxKind.VariableDeclaration:return!0;default:return!1}}static isUnaryExpression(n){switch(n.getKind()){case i.SyntaxKind.ClassExpression:case i.SyntaxKind.Identifier:case i.SyntaxKind.AwaitExpression:case i.SyntaxKind.CallExpression:case i.SyntaxKind.DeleteExpression:case i.SyntaxKind.ElementAccessExpression:case i.SyntaxKind.ImportKeyword:case i.SyntaxKind.MetaProperty:case i.SyntaxKind.NewExpression:case i.SyntaxKind.NonNullExpression:case i.SyntaxKind.PostfixUnaryExpression:case i.SyntaxKind.PrefixUnaryExpression:case i.SyntaxKind.PropertyAccessExpression:case i.SyntaxKind.SuperKeyword:case i.SyntaxKind.ThisKeyword:case i.SyntaxKind.TypeAssertionExpression:case i.SyntaxKind.TypeOfExpression:case i.SyntaxKind.VoidExpression:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.JsxElement:case i.SyntaxKind.JsxFragment:case i.SyntaxKind.JsxSelfClosingElement:case i.SyntaxKind.FalseKeyword:case i.SyntaxKind.TrueKeyword:case i.SyntaxKind.NullKeyword:case i.SyntaxKind.NumericLiteral:case i.SyntaxKind.RegularExpressionLiteral:case i.SyntaxKind.StringLiteral:case i.SyntaxKind.ArrayLiteralExpression:case i.SyntaxKind.ObjectLiteralExpression:case i.SyntaxKind.NoSubstitutionTemplateLiteral:case i.SyntaxKind.TaggedTemplateExpression:case i.SyntaxKind.TemplateExpression:return!0;default:return!1}}static isUnaryExpressionedNode(n){switch(n.getKind()){case i.SyntaxKind.AwaitExpression:case i.SyntaxKind.DeleteExpression:case i.SyntaxKind.TypeAssertionExpression:case i.SyntaxKind.TypeOfExpression:case i.SyntaxKind.VoidExpression:return!0;default:return!1}}static isUndefinedKeyword(n){return n.getKind()===i.SyntaxKind.UndefinedKeyword}static isUnionTypeNode(n){return n.getKind()===i.SyntaxKind.UnionType}static isUnwrappableNode(n){switch(n.getKind()){case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.ModuleDeclaration:return!0;default:return!1}}static isUpdateExpression(n){switch(n.getKind()){case i.SyntaxKind.ClassExpression:case i.SyntaxKind.Identifier:case i.SyntaxKind.CallExpression:case i.SyntaxKind.ElementAccessExpression:case i.SyntaxKind.ImportKeyword:case i.SyntaxKind.MetaProperty:case i.SyntaxKind.NewExpression:case i.SyntaxKind.NonNullExpression:case i.SyntaxKind.PropertyAccessExpression:case i.SyntaxKind.SuperKeyword:case i.SyntaxKind.ThisKeyword:case i.SyntaxKind.FunctionExpression:case i.SyntaxKind.JsxElement:case i.SyntaxKind.JsxFragment:case i.SyntaxKind.JsxSelfClosingElement:case i.SyntaxKind.FalseKeyword:case i.SyntaxKind.TrueKeyword:case i.SyntaxKind.NullKeyword:case i.SyntaxKind.NumericLiteral:case i.SyntaxKind.RegularExpressionLiteral:case i.SyntaxKind.StringLiteral:case i.SyntaxKind.ArrayLiteralExpression:case i.SyntaxKind.ObjectLiteralExpression:case i.SyntaxKind.NoSubstitutionTemplateLiteral:case i.SyntaxKind.TaggedTemplateExpression:case i.SyntaxKind.TemplateExpression:return!0;default:return!1}}static isVariableDeclaration(n){return n.getKind()===i.SyntaxKind.VariableDeclaration}static isVariableDeclarationList(n){return n.getKind()===i.SyntaxKind.VariableDeclarationList}static isVariableStatement(n){return n.getKind()===i.SyntaxKind.VariableStatement}static isVoidExpression(n){return n.getKind()===i.SyntaxKind.VoidExpression}static isWhileStatement(n){return n.getKind()===i.SyntaxKind.WhileStatement}static isWithStatement(n){return n.getKind()===i.SyntaxKind.WithStatement}static isYieldExpression(n){return n.getKind()===i.SyntaxKind.YieldExpression}static _hasStructure(n){switch(n.getKind()){case i.SyntaxKind.ClassDeclaration:case i.SyntaxKind.Constructor:case i.SyntaxKind.GetAccessor:case i.SyntaxKind.MethodDeclaration:case i.SyntaxKind.PropertyDeclaration:case i.SyntaxKind.SetAccessor:case i.SyntaxKind.Decorator:case i.SyntaxKind.JSDocComment:case i.SyntaxKind.EnumDeclaration:case i.SyntaxKind.EnumMember:case i.SyntaxKind.FunctionDeclaration:case i.SyntaxKind.Parameter:case i.SyntaxKind.CallSignature:case i.SyntaxKind.ConstructSignature:case i.SyntaxKind.IndexSignature:case i.SyntaxKind.InterfaceDeclaration:case i.SyntaxKind.MethodSignature:case i.SyntaxKind.PropertySignature:case i.SyntaxKind.JsxAttribute:case i.SyntaxKind.JsxElement:case i.SyntaxKind.JsxSelfClosingElement:case i.SyntaxKind.JsxSpreadAttribute:case i.SyntaxKind.ExportAssignment:case i.SyntaxKind.ExportDeclaration:case i.SyntaxKind.ExportSpecifier:case i.SyntaxKind.ImportDeclaration:case i.SyntaxKind.ImportSpecifier:case i.SyntaxKind.ModuleDeclaration:case i.SyntaxKind.SourceFile:case i.SyntaxKind.VariableStatement:case i.SyntaxKind.TypeAliasDeclaration:case i.SyntaxKind.TypeParameter:case i.SyntaxKind.VariableDeclaration:case i.SyntaxKind.PropertyAssignment:case i.SyntaxKind.ShorthandPropertyAssignment:case i.SyntaxKind.SpreadAssignment:return!0;default:return!1}}}}}]);
//# sourceMappingURL=vendor.ts-morph~880bbc2c.c9df2ac55d1d06be46f0.bundle.map